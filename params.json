{"name":"Yahoo-finance-query","tagline":"A PHP class to query the Yahoo Finance API.","body":"YahooFinanceQuery\r\n=================\r\nA PHP class to query the Yahoo Finance API.\r\n\r\nFeatures\r\n--------\r\n- search for symbol via Yahoo.Finance.Symbol.AutoSuggest\r\n- query current quotes for symbols\r\n- query historical quotes for single symbol\r\n- query intraday quotes for single symbol\r\n- query basic stock info\r\n- query list of related stocks for index symbols\r\n- query full list of sectors with related industries\r\n\r\nExample\r\n-------\r\nYou can test the example.php at http://code.dirkolbrich.de/YahooFinanceQuery/example.php\r\n\r\nInstallation\r\n------------\r\nrequire via `composer.json` in your project root\r\n```json\r\n{\r\n    \"require\": {\r\n        \"dirkolbrich/yahoo-finance-query\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\nOr copy the `YahooFinanceQuery.php` from the `/src` folder into your project.\r\n\r\nImplementation\r\n--------------\r\nAs simple as that:\r\n```php\r\nrequire 'YahooFinanceQuery.php';\r\nuse DirkOlbrich\\YahooFinanceQuery\\YahooFinanceQuery;\r\n// [...]\r\n$query = new YahooFinanceQuery;\r\n```\r\n\r\nor as static:\r\n```php\r\nuse DirkOlbrich\\YahooFinanceQuery\\YahooFinanceQuery;\r\n// [...]\r\nYahooFinanceQuery->make();\r\n```\r\n\r\nConfiguration\r\n-------------\r\nYahooFinanceQuery can be configured to return the data as an array or the raw json. Default `returnType` is `array`.\r\n\r\nThe config setting has to be passed as an array `array('returnType' => 'array')` or  `array('returnType' => 'json')`.\r\n\r\nAt initialisation:\r\n```php\r\n$query = new YahooFinanceQuery(array('returnType' => 'json'));\r\n```\r\nor as static:\r\n```php\r\nYahooFinanceQuery->make(array('returnType' => 'json'));\r\n```\r\n\r\nAt run-time:\r\n```php\r\n$query = new YahooFinanceQuery;\r\n$query->config(array('returnType' => 'json'));\r\n```\r\n\r\nThe current config setting can be retrieved with:\r\n```php\r\n$query->getConfig();\r\n```\r\n\r\nTo retrieve the raw cURL result use `raw()` as addition to the query. This method must be called before the actural query method.\r\n```php\r\n$query->raw()->quote()->get();\r\n```\r\n\r\nTo force the use via the YQL api (if possible), use the `yql()` method within the query string. This method must be called before the actural query method. The default is set to not use YQL, as I think YQL querys are unreliable and often with truncated results.\r\n```php\r\n$query->yql()->quote()->get();\r\n```\r\n\r\nUsage\r\n-----\r\nQuerys are chainable. Use the `get()` method to to retrieve the results.\r\n```php\r\n$data = $query->method()->get();\r\n```\r\n\r\nFollowing query methods are available:\r\n\r\n1. `symbolSuggest($string)`\r\n\r\n    Query for symbol suggestion via the YAHOO.Finance.SymbolSuggest.ssCallback\r\n    ```php\r\n    $string = 'basf';\r\n    $data = $query->symbolSuggest($string)->get();\r\n    ```\r\n\r\n2. `quote(array $symbol [, array $params])`\r\n\r\n    Query for current quote for given symbols and given parameters.\r\n\r\n    The passed parameter `$symbol` must be an array. Several symbols can be passed.\r\n\r\n    The passed parameter `$params` is optional and must be an array too. It accepts the parameters as a written word or as tags. See as reference the `$quoteParams` variable in the class definition. If `$params` is empty, the query will use all possible params.\r\n\r\n    The params 'Symbol', 'LastTradeTime' and 'LastTradeDate' will be quered by default. There will be a unified UTC 'LastTradeTimestamp' added to the result array.\r\n\r\n    ```php\r\n    $symbol = array('bas.de');\r\n    $params = array('LastTradePriceOnly', 'x', 'c1');\r\n    $data = $query->quote($symbol, $params)->get();\r\n    ```\r\n\r\n3. `historicalQuote(array $symbol [, $startDate, $endDate, $param])`\r\n\r\n    Query for historical quotes for given symbol with given start date and end date.\r\n\r\n    Only one `$symbol` can be passed per query and must be a string.\r\n\r\n    `$startDate` and `$endDate` must be in the format YYYY-MM-DD. If no dates are passed, the query will grab all available historical quotes. If only one date is passed, the other one will be set to the maximum available.\r\n\r\n    `$param` is set to default `d` = daily. See `$historicalQuoteParams` variable for other options.\r\n\r\n    ```php\r\n    $symbol = array('bas.de');\r\n    $startDate = 2013-07-26;\r\n    $endDate = 2014-01-06;\r\n    $param = 'd';\r\n    $data = $query->historicalQuote($symbol, $startDate, $endDate, $param)->get();\r\n    ```\r\n    I recommend not to use the `yql()` method with historical quotes, as the YQL console permits only up to 365 single result quotes. To retrieve a full set of historical quotes will not be possible via YQL.\r\n\r\n4. `intraDay($symbol [, $period, $param])`\r\n\r\n    Query the Yahoo Finance html page for intraday quotes. The symbol must be passed as as string.\r\n\r\n    `$period` is optional and default set to `1d`. It is possible to retrieve intraday quotes for up to the last 15 days.\r\n\r\n    `$param` is optional and default set to `quote`. For other options see the `$intraDayParams` variable.\r\n\r\n    ```php\r\n    $symbol = 'bas.de';\r\n    $period = '5d';\r\n    $data = $query->intraDay($symbol, $period)->get();\r\n    ```\r\n\r\n5. `stockInfo($symbol)`\r\n\r\n    Query the Yahoo Finance html page for basic stock information. The symbol must be passed as as string.\r\n\r\n    ```php\r\n    $symbol = 'bas.de';\r\n    $data = $query->stockInfo($symbol)->get();\r\n    ```\r\n\r\n6. `indexList(array $symbol)`\r\n\r\n    Query for an index which returns the symbol and name of the components. Several symbols may be passed as an array. If no sybol is passed, a default list of indexes returns. The default list can be set with the `$indexSymbolsDefault` variable.\r\n\r\n    See http://finance.yahoo.com/intlindices?e=europe for more symbols to world indices. The caret `^` character must be part of the symbol.\r\n\r\n    ```php\r\n    $symbol = array('^GDAXI');\r\n    $data = $query->indexList($symbol)->get();\r\n    ```\r\n\r\n7. `sectorList()`\r\n\r\n    Query for a complete list of sectors and their corresponding industries.\r\n\r\n    This function is static without any params.\r\n\r\n    ```php\r\n    $data = $query->sectorList()->get();\r\n    ```\r\n\r\nRecources\r\n---------\r\nSome informative blog post and websites:\r\n\r\nYahoo YQL homepage\r\n* http://developer.yahoo.com/yql/\r\n\r\nBlog post on that matter\r\n* http://www.yqlblog.net/blog/2009/06/02/getting-stock-information-with-yql-and-open-data-tables/\r\n\r\nBlog post from Joseph D. Purcell with an overview over finance API'S is a good entry point\r\n* http://thesimplesynthesis.com/article/finance-apis\r\n\r\nwww.gummy-stuff.org explains the Yahoo Finance .csv API\r\n* http://www.gummy-stuff.org/Yahoo-data.htm\r\n\r\nAn overview over different api endpoints by Matthias Brusdeylins (german)\r\n* http://brusdeylins.info/projects/yahoo-finance-api/\r\n\r\nTutorial for the YQL stuff by Thomas Belser (german)\r\n* http://www.thomasbelser.net/2011/12/13/auslesen-von-aktienkursen-und-deren-symbole-mit-php-und-yql/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}